# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy

variables:
  IMAGE_NAME: $REGISTRY_USER/cliver-api
  IMAGE_TAG: "latest"

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 1 seconds."
    - sleep 1
    - echo "Code coverage is 90%"


unit-test-prod:   # This job runs in the test stage.
  stage: test  
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - when: never  
  script:
    - echo "Running unit tests when on production... This will take about 1 seconds. $CI_DEFAULT_BRANCH"
    - sleep 1
    - echo "Code coverage is 90%"

build-image:       # This job runs in the build stage, which runs first.
  stage: build
  image: docker:19.03
  services:
    - name:  docker:19.03-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh", "--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker info
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG
  only:
    - main

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  variables:
    SERVER_USER: azureuser  
    SERVER_IP: 20.214.161.170
  before_script:
    - chmod 400 $SSH_KEY
  script:
    - echo "Deploying application..."
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $SERVER_USER@$SERVER_IP "
      docker info &&
      docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD &&
      docker ps -aq | xargs docker stop | xargs docker rm &&
      docker run -d -it -p 80:80 -p 443:443 --name cliver-api $IMAGE_NAME:$IMAGE_TAG" 
    - echo "Application successfully deployed."
  environment:
    name: production
    url: http://$SERVER_IP/swagger
  only:
    - main

